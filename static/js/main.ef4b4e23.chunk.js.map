{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","class","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setAlert","message","setTimeout","_useState3","_useState4","setMode","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ef4b4e23.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n        </li>\n        {/* <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\n        </li> */}\n      </ul>\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form> */}\n      <div className={`form-check form-switch text-${props.mode === 'light'?'dark' : 'light'}`}>\n        <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\" />\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n      </div>\n    </div>\n  </div>\n</nav>\n  )\n}\n\nNavbar.propTypes = {\n    title : PropTypes.string.isRequired,\n    aboutText : PropTypes.string.isRequired\n}\n\nNavbar.defaultProps ={\n    title : \"Set title here\",\n    aboutText : \"about text here\"\n}","import React , {useState} from 'react'\n\n\nexport default function TextForm(props) {\n  const handleUpClick = ()=>{\n    //  console.log(\"upper click was clicked : \" + text);\n     let newtext = text.toUpperCase();\n     setText(newtext);\n     props.showAlert(\"Converted to Upper Case!\", \"success\");\n  }\n\n  const handleOnChange = (event)=>{\n    // console.log(\"on change\");\n    setText(event.target.value);\n  }\n\n  const handleLowClick = ()=>{\n    // console.log(\"lower case has been initiated\");\n    let newtext = text.toLowerCase();\n    setText(newtext);\n    props.showAlert(\"Converted to Lower Case!\", \"success\");\n  }\n\n  const handleClearClick = ()=>{\n    let newtext = \"\";\n    setText(newtext);\n    props.showAlert(\"Text Cleared!\", \"success\");\n  }\n\n  const handleCopy = ()=>{\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\n  }\n\n  const [text, setText] = useState('');\n\n  return (\n    <>\n    <div className = \"container\" style={{color: props.mode === 'dark'?'white' : 'black'}}>\n        <h1>{props.heading}</h1>\n\n        <div className=\"mb-3\">\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'grey' : 'white', color: props.mode === 'dark'?'white' : 'black'}} id=\"myBox\" rows=\"8\"></textarea>\n        </div>\n   <button className=\"btn btn-primary mx-1\" onClick={handleUpClick} >Convert to UpperCase</button>\n   <button className=\"btn btn-secondary mx-1\" onClick={handleLowClick} >Convert to LowerCase</button>\n   <button className=\"btn btn-danger mx-1\" onClick={handleClearClick} >Clear</button>\n   <button className=\"btn btn-warning mx-1\" onClick={handleCopy} >Copy All</button>\n    </div>\n\n    <div className=\"container my-5\" style={{color: props.mode === 'dark'?'white' : 'black'}}>\n        <h3>Your text summary</h3>\n        <p> {text.split(\" \").length} Words and {text.length} Characters</p>\n\n        <h4>Preview</h4>\n        <p>{text.length > 0 ?text:\"Enter something in the TextBox above to preview something\"}</p>\n    </div>\n\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n\n    //function to make success 's' capital\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase()+ lower.slice(1);\n    }\n\n  return (\n    props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong> {capitalize(props.alert.type)} </strong> : {props.alert.msg}\n    </div>\n  )\n}\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n\n  //function for alert\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    //after which message will remove\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#0b387b';\n      showAlert(\"Dark mode has been enabled\" , \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\" , \"success\");\n    }\n  }\n\n  return (\n   <>\n   \n   <Navbar title=\"TextUtils\" aboutText = \"About\" mode={mode} toggleMode ={toggleMode}/>\n   <Alert alert= {alert}/>\n\n   <div className=\"container my-3\">\n    <TextForm showAlert={showAlert} heading = \"Enter the text here\" mode={mode}/>\n   </div>\n\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}